#!/usr/bin/env bash

# DO NOT EDIT THIS FILE!
# Generated by fulgens (https://www.npmjs.com/package/fulgens)
# Version: 0.0.24

trap cleanup 2
set -e

#---------------------
# START - FunctionsBuilder



jdk_version() {
	
  # returns the JDK version.
  # 8 for 1.8.0_nn, 9 for 9-ea etc, and "no_java" for undetected
  # from https://stackoverflow.com/questions/7334754/correct-way-to-check-java-version-from-bash-script
  local result
  local java_cmd
  if [[ -n $(type -p java) ]]
  then
    java_cmd=java
  elif [[ (-n "$JAVA_HOME") && (-x "$JAVA_HOME/bin/java") ]]
  then
    java_cmd="$JAVA_HOME/bin/java"
  fi
  local IFS=$'\n'
  # remove \r for Cygwin
  local lines=$("$java_cmd" -Xms32M -Xmx32M -version 2>&1 | tr '\r' '\n')
  if [[ -z $java_cmd ]]
  then
    result=no_java
  else
    for line in $lines; do
      if [[ (-z $result) && ($line = *"version \""*) ]]
      then
        local ver=$(echo $line | sed -e 's/.*version "\(.*\)"\(.*\)/\1/; 1q')
        # on macOS, sed doesn't support '?'
        if [[ $ver = "1."* ]]
        then
          result=$(echo $ver | sed -e 's/1\.\([0-9]*\)\(.*\)/\1/; 1q')
        else
          result=$(echo $ver | sed -e 's/\([0-9]*\)\(.*\)/\1/; 1q')
        fi
      fi
    done
  fi
  echo "$result"

}


  
# END - FunctionsBuilder
#---------------------

verbosePrint() {
	if [ "$VERBOSE" == "YES" ]; then
		echo -e "$1"
	fi
}

startDockerNetwork() {
	if [ -z "$DOCKER_NETWORKED_CHECKED" ]; then
		DOCKER_NETWORKED_CHECKED=YES
		if ! docker network ls|grep -s "cycnet"; then
			verbosePrint "Starting docker network cycnet on 10.176.252.0/24"
			docker network create -d bridge --subnet 10.176.252.0/24 --gateway 10.176.252.1 "cycnet"
		else
			verbosePrint "Docker network cycnet already running"
		fi
	fi
}

#---------------------
# START - CleanupBuilder


cleanup()
{
  echo "****************************************************************"
  echo "Stopping software .....please wait...."
  echo "****************************************************************"
  set +e

  ALL_COMPONENTS=(db engine tomcat)
  for componentToStop in "${ALL_COMPONENTS[@]}"; do
    IFS=',' read -r -a keepRunningArray <<< "$KEEP_RUNNING"
    componentFoundToKeepRunning=0
    for keepRunningToFindeElement in "${keepRunningArray[@]}"; do
      if [ "$componentToStop" == "$keepRunningToFindeElement" ]; then
        echo "Not stopping $componentToStop!"
        componentFoundToKeepRunning=1
      fi
    done
    if [ "$componentFoundToKeepRunning" -eq 0 ]; then
      
      if [ "$START_DB" = "YES" ]; then
        if [ "$componentToStop" == "db" ]; then
          echo "Stopping $componentToStop ..."
          
          if [ "$TYPE_SOURCE_DB" == "docker" ]; then
           docker rm -f $dockerContainerIDdb
           rm -f .dbPid
          fi
          
        fi
      fi
      
      if [ "$START_ENGINE" = "YES" ]; then
        if [ "$componentToStop" == "engine" ]; then
          echo "Stopping $componentToStop ..."
          
          if [ "$TYPE_SOURCE_ENGINE" == "local" ]; then
           echo exit|nc localhost 9998
           rm -f .enginePid
          fi
          
          if [ "$TYPE_SOURCE_ENGINE" == "docker" ]; then
           docker rm -f $dockerContainerIDengine
           rm -f .enginePid
          fi
          
        fi
      fi
      
      if [ "$START_TOMCAT" = "YES" ]; then
        if [ "$componentToStop" == "tomcat" ]; then
          echo "Stopping $componentToStop ..."
          
          if [ "$TYPE_SOURCE_TOMCAT" == "docker" ]; then
           docker rm -f $dockerContainerIDtomcat
           rm -f .tomcatPid
          fi
          
          if [ "$TYPE_SOURCE_TOMCAT" == "download" ]; then
           ./localrun/apache-tomcat-$TOMCAT_VERSION/bin/shutdown.sh
           rm -f .tomcatPid
          fi
          
        fi
      fi
      
    fi
  done

  exit 0
}


  
# END - CleanupBuilder
#---------------------

#---------------------
# START - OptionsBuilder


usage="
usage: $(basename "$0") [options] [<component(s)>]

Options:
  -h                         show this help text
  -s                         skip any build
  -S                         skip consistency check against Fulgensfile
  -c [all|build]             clean local run directory, when a build is scheduled for execution it also does a full build
  -k [component]             keep comma sperarated list of components running
  -t [component:type:[path|version]] run component inside [docker] container, [download] component or [local] use installed component from path
  -v                         enable Verbose
  -V                         start VirtualBox via vagrant, install all dependencies, ssh into the VM and run
  -j version                 macOS only: set/overwrite JAVA_HOME to a specific locally installed version, use format from/for: /usr/libexec/java_home [-V]
  -f                         tail the apache catalina log at the end
  
Url: http://localhost:8080/cyr

Details for components:
build {Source:\"mvn\", Default-Type:\"local\", Version-Info: \"Tested with 3-jdk-11\"}
  -t build:local #build local and respect -j
  -t build:docker:[TAG] #docker based build, default tag: latest, uses image https://hub.docker.com/_/maven
db {Source:\"couchdb\", Default-Type:\"docker:2\", Version-Info: \"Tested with 1.7 & 2\"}
  -t db:local #reuse a local, running CouchDB installation, does not start/stop this CouchDB
  -t db:docker:[TAG] #start docker, default tag 2, uses image https://hub.docker.com/_/couchdb
engine {Source:\"shell\", Default-Type:\"local\", Version-Info: \"Max Java 8\"}
  -t engine:local #On macOS: Java version overwritten to 1.8
  -t engine:local #start a local shell script
  -t engine:docker:[latest] #start inside docker, default tag 8-jre, uses image https://hub.docker.com/_/openjdk
tomcat {Source:\"tomcat\", Default-Type:\"download:9\", Version-Info: \"Tested with 7 & 9\"}
  -t tomcat:docker:[TAG] #start docker, default tag tomcat9-openjdk11-openj9, uses image https://hub.docker.com/r/oglimmer/adoptopenjdk-tomcat
  -t tomcat:download:[7|8|9] #start fresh downloaded tomcat, default version 9 and respect -j
  -t tomcat:local:TOMCAT_HOME_PATH #reuse tomcat installation from TOMCAT_HOME_PATH, does not start/stop this tomcat
"

cd "$(cd "$(dirname "$0")";pwd -P)"
BASE_PWD=$(pwd)

BUILD=local
while getopts ':hsSc:k:x:t:vVj:f' option; do
  case "$option" in
    h) echo "$usage"
       exit;;
    s) SKIP_BUILD=YES;;
    S) SKIP_HASH_CHECK=YES;;
    c) 
       CLEAN=$OPTARG
       if [ "$CLEAN" != "all" -a "$CLEAN" != "build" ]; then
         echo "Illegal -c parameter" && exit 1
       fi
       ;;
    k) KEEP_RUNNING=$OPTARG;;
    x) SKIP_STARTING=$OPTARG;;
    t) TYPE_SOURCE=$OPTARG;;
    v) VERBOSE=YES;;

    V) VAGRANT=YES;;

    j) JAVA_VERSION=$OPTARG;;

    f) TAIL=YES;;

    :) printf "missing argument for -%s\\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1;;
   \\?) printf "illegal option: -%s\\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1;;
  esac
done
shift $((OPTIND - 1))

if [ -z "$1" ]; then

  declare START_BUILD=YES

  declare START_DB=YES

  declare START_ENGINE=YES

  declare START_TOMCAT=YES

else
  ALL_COMPONENTS=(BUILD DB ENGINE TOMCAT)
  for comp in "$@"; do
    compUpper=$(echo $comp | awk '{print toupper($0)}')
    compValid=0
    for compDefined in "${ALL_COMPONENTS[@]}"; do
      if [ "$compDefined" = "$compUpper" ]; then
        compValid=1
      fi
    done
    if [ "$compValid" -eq 0 ]; then
      echo "Component $comp is invalid!"
      exit 1
    fi
    declare START_$compUpper=YES
  done  
fi

  
# END - OptionsBuilder
#---------------------

if [ "$SKIP_HASH_CHECK" != "YES" ]; then
	if which md5 1>/dev/null; then
		declare SELF_HASH_MD5="15626217ec4bb58e4d3148ff305d73c0"
		declare SOURCE_FILES=(Fulgensfile Fulgensfile.js)
		for SOURCE_FILE in ${SOURCE_FILES[@]}; do
			declare SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")">/dev/null&&pwd)"
			if [ -f "$SCRIPT_DIR/$SOURCE_FILE" ]; then
				if [ "$SELF_HASH_MD5" != "$(md5 -q $SCRIPT_DIR/$SOURCE_FILE)" ]; then
					echo "$SOURCE_FILE doesn not match!"
					exit 1
				fi
			fi
		done
	fi
fi

#---------------------
# START - DependencycheckBuilder

mvn --version 1>/dev/null || exit 1; 
docker --version 1>/dev/null || exit 1; 
java -version 2>/dev/null || exit 1; 
curl --version 1>/dev/null || exit 1; 

  
# END - DependencycheckBuilder
#---------------------

# clean if requested
if [ -n "$CLEAN" ]; then
	if [ "$CLEAN" == "all" ]; then
		if [ "$VERBOSE" == "YES" ]; then echo "rm -rf localrun"; fi
		rm -rf localrun
	fi
  	
fi

#---------------------
# START - GlobalVariablesBuilder


      verbosePrint "DEFAULT: TYPE_SOURCE_BUILD=local"
      TYPE_SOURCE_BUILD=local
    

      verbosePrint "DEFAULT: TYPE_SOURCE_DB=docker"
      TYPE_SOURCE_DB=docker
    

      verbosePrint "DEFAULT: TYPE_SOURCE_ENGINE=local"
      TYPE_SOURCE_ENGINE=local
    

      verbosePrint "DEFAULT: TYPE_SOURCE_TOMCAT=download"
      TYPE_SOURCE_TOMCAT=download
    
  
# END - GlobalVariablesBuilder
#---------------------

if [ "$(uname)" = "Linux" ]; then 
	ADD_HOST_INTERNAL="--add-host host.docker.internal:$(ip -4 addr show scope global dev docker0 | grep inet | awk '{print $2}' | cut -d / -f 1)"
fi


mkdir -p localrun

f_deploy() {
	echo "No plugin defined f_deploy()"
}

#---------------------
# START - PrepareBuilder



if [ "$(uname)" == "Darwin" ]; then 
  if [ -n "$JAVA_VERSION" ]; then
    export JAVA_HOME=$(/usr/libexec/java_home -v $JAVA_VERSION)
  fi
fi



if [ "$VAGRANT" == "YES" -a "$VAGRANT_IGNORE" != "YES" ]; then
  mkdir -p localrun
  cd localrun
  cat <<-EOF > Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.synced_folder "../", "/share_host"
  
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1536"
    vb.cpus = 4
  end
  config.vm.provision "shell", inline: <<-SHELL
  	
    apt-get update    
    
      if [ "\$(cat /etc/*release|grep ^ID=)" = "ID=debian"  ]; then \\
        if [ "\$(cat /etc/debian_version)" = "8.11" ]; then \\
            apt-get -qy install maven openjdk-8-jdk-headless couchdb docker.io; \\
        elif [ "\$(cat /etc/debian_version)" = "9.5" ]; then \\
           apt-get -qy install maven openjdk-8-jdk-headless couchdb docker.io; \\
        else  apt-get -qy install maven openjdk-8-jdk-headless couchdb docker.io; fi \\
      elif [ "\$(cat /etc/*release|grep ^ID=)" = "ID=ubuntu"  ]; then \\
         apt-get -qy install maven openjdk-8-jdk-headless couchdb docker.io; \\
      else \\
        echo "only debian or ubuntu are supported."; \\
        exit 1; \\
      fi \\
    
    
    
    echo "Now continue with..."
    echo "\$ cd /share_host"
    echo "\$ sudo ./run_local.sh -f"
    echo "...then browse to http://localhost:8080/cyr"
  SHELL
end
EOF
  vagrant up
  if [ -f "../run_local.sh" ]; then
    vagrant ssh -c "cd /share_host && sudo ./run_local.sh -f"
  else
    echo "Save the fulgens output into a bash script (e.g. run_local.sh) and use it inside the new VM"
  fi
  exit 1
fi



  
# END - PrepareBuilder
#---------------------



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MvnPlugin // build
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
verbosePrint "MvnPlugin // build"


if [ "$START_BUILD" = "YES" ]; then

#---------------------
# START - Plugin-PrepareComp




IFS=',' read -r -a array <<< "$TYPE_SOURCE"
for typeSourceElement in "${array[@]}"; do
  IFS=: read comp type pathOrVersion <<< "$typeSourceElement"

  if [ "$comp" == "build" ]; then
    TYPE_SOURCE_BUILD=$type
    if [ "$TYPE_SOURCE_BUILD" == "local" ]; then
      TYPE_SOURCE_BUILD_PATH=$pathOrVersion
    else
      TYPE_SOURCE_BUILD_VERSION=$pathOrVersion
    fi
  fi

done



if [ "$TYPE_SOURCE_BUILD" == "docker" ]; then
  if [ -z "$TYPE_SOURCE_BUILD_VERSION" ]; then
    TYPE_SOURCE_BUILD_VERSION=latest
  fi
    
fi



verbosePrint "TYPE_SOURCE_BUILD = $TYPE_SOURCE_BUILD // TYPE_SOURCE_BUILD_PATH = $TYPE_SOURCE_BUILD_PATH // TYPE_SOURCE_BUILD_VERSION = $TYPE_SOURCE_BUILD_VERSION"


  
# END - Plugin-PrepareComp
#---------------------






if [ "$TYPE_SOURCE_BUILD" == "local" ]; then
  f_build() {
    verbosePrint "pwd=$(pwd)\nmvn $MVN_CLEAN $MVN_OPTS package"
    
    
    mvn $MVN_CLEAN $MVN_OPTS package
    
  }
fi

if [ "$TYPE_SOURCE_BUILD" == "docker" ]; then

  
  dockerImage=maven
  

  f_build() {
    verbosePrint "pwd=$(pwd)\ndocker run --name=build --rm -v $(pwd):/usr/src/build -v "$(pwd)/localrun/.m2":/root/.m2 -w /usr/src/build $dockerImage:$TYPE_SOURCE_BUILD_VERSION mvn $MVN_CLEAN $MVN_OPTS package"
    
    docker run --name=build --rm  -v "$(pwd)":/usr/src/build -v "$(pwd)/localrun/.m2":/root/.m2 -w /usr/src/build $dockerImage:$TYPE_SOURCE_BUILD_VERSION mvn $MVN_CLEAN $MVN_OPTS package
    
  }
fi   

if [ "$SKIP_BUILD" != "YES" ]; then
  if [ -n "$CLEAN" ]; then
    MVN_CLEAN=clean
  fi
  f_build
else
  verbosePrint "Mvn build skipped."
fi  





fi



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CouchdbPlugin // db
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
verbosePrint "CouchdbPlugin // db"


if [ "$START_DB" = "YES" ]; then

#---------------------
# START - Plugin-PrepareComp




IFS=',' read -r -a array <<< "$TYPE_SOURCE"
for typeSourceElement in "${array[@]}"; do
  IFS=: read comp type pathOrVersion <<< "$typeSourceElement"

  if [ "$comp" == "db" ]; then
    TYPE_SOURCE_DB=$type
    if [ "$TYPE_SOURCE_DB" == "local" ]; then
      TYPE_SOURCE_DB_PATH=$pathOrVersion
    else
      TYPE_SOURCE_DB_VERSION=$pathOrVersion
    fi
  fi

done



if [ "$TYPE_SOURCE_DB" == "docker" ]; then
  if [ -z "$TYPE_SOURCE_DB_VERSION" ]; then
    TYPE_SOURCE_DB_VERSION=2
  fi
    
fi



verbosePrint "TYPE_SOURCE_DB = $TYPE_SOURCE_DB // TYPE_SOURCE_DB_PATH = $TYPE_SOURCE_DB_PATH // TYPE_SOURCE_DB_VERSION = $TYPE_SOURCE_DB_VERSION"


  
# END - Plugin-PrepareComp
#---------------------





if [ "$TYPE_SOURCE_DB" == "docker" ]; then
  if [ ! -f ".dbPid" ]; then
    startDockerNetwork
    


    
    verbosePrint "docker run --rm -d -p 5984:5984 -m 200M --net=cycnet --name=db $ADD_HOST_INTERNAL   couchdb:$TYPE_SOURCE_DB_VERSION"
    dockerContainerIDdb=$(docker run --rm -d -p 5984:5984 \
      -m 200M \
      --net=cycnet --name=db $ADD_HOST_INTERNAL \
        couchdb:$TYPE_SOURCE_DB_VERSION)
    echo "$dockerContainerIDdb">.dbPid
  else
    dockerContainerIDdb=$(<.dbPid)
    echo "Reusing already running instance $dockerContainerIDdb"
  fi
fi
if [ "$TYPE_SOURCE_DB" == "local" ]; then
  if [ -f ".dbPid" ]; then
    echo "couchdb db running but started from different source type"
    exit 1
  fi
fi



while [ "$(curl --write-out %{http_code} --silent --output /dev/null http://localhost:5984)" != "200" ]; do
  echo "waiting for couchdb..."
  sleep 1
done



if [[ "$(curl -s http://localhost:5984/cyc)" =~ .*"error".*"not_found".* ]]; then
	curl -X PUT http://localhost:5984/cyc

	
	curl -X POST -H "Content-Type: application/json" -d @persistence/src/couchdb/_design-GameRun-curl.json http://localhost:5984/cyc
	
	curl -X POST -H "Content-Type: application/json" -d @persistence/src/couchdb/_design-GameWinners-curl.json http://localhost:5984/cyc
	
	curl -X POST -H "Content-Type: application/json" -d @persistence/src/couchdb/_design-User-curl.json http://localhost:5984/cyc
	
fi





fi



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ShellPlugin // engine
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
verbosePrint "ShellPlugin // engine"


if [ "$START_ENGINE" = "YES" ]; then

#---------------------
# START - Plugin-PrepareComp




IFS=',' read -r -a array <<< "$TYPE_SOURCE"
for typeSourceElement in "${array[@]}"; do
  IFS=: read comp type pathOrVersion <<< "$typeSourceElement"

  if [ "$comp" == "engine" ]; then
    TYPE_SOURCE_ENGINE=$type
    if [ "$TYPE_SOURCE_ENGINE" == "local" ]; then
      TYPE_SOURCE_ENGINE_PATH=$pathOrVersion
    else
      TYPE_SOURCE_ENGINE_VERSION=$pathOrVersion
    fi
  fi

done



if [ "$TYPE_SOURCE_ENGINE" == "docker" ]; then
  if [ -z "$TYPE_SOURCE_ENGINE_VERSION" ]; then
    TYPE_SOURCE_ENGINE_VERSION=8-jre
  fi
    
fi



verbosePrint "TYPE_SOURCE_ENGINE = $TYPE_SOURCE_ENGINE // TYPE_SOURCE_ENGINE_PATH = $TYPE_SOURCE_ENGINE_PATH // TYPE_SOURCE_ENGINE_VERSION = $TYPE_SOURCE_ENGINE_VERSION"


  
# END - Plugin-PrepareComp
#---------------------



#---------------------
# START - Plugin-PreStart


CYC_ENG_CON_PATH=localrun/cyc-engine-container
mkdir -p $CYC_ENG_CON_PATH
cp engine-container/target/engine-container-jar-with-dependencies.jar $CYC_ENG_CON_PATH
mkdir -p $CYC_ENG_CON_PATH/logs
cp ansible/roles/cyc-container/files/scripts/security.policy $CYC_ENG_CON_PATH
cp ansible/roles/cyc-container/files/scripts/run.sh $CYC_ENG_CON_PATH
chmod 777 $CYC_ENG_CON_PATH/run.sh
mkdir -p $CYC_ENG_CON_PATH/cyc001
cp engine/target/engine-jar-with-dependencies.jar $CYC_ENG_CON_PATH/cyc001

if [ "$(uname)" = "Darwin" ]; then
          ORIGINAL_JAVA_HOME="$JAVA_HOME"
          export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
        elif [ "$(jdk_version)" != "8" ]; then
          echo "ERROR: the local Java version is different to the one defined in Fulgensfile.version for this component!"
          exit 1
        fi

  
# END - Plugin-PreStart
#---------------------

if [ "$TYPE_SOURCE_ENGINE" == "local" ]; then
  if [ ! -f ".enginePid" ]; then
    verbosePrint "nohup localrun/cyc-engine-container/run.sh 1>>localrun/engine.log 2>>localrun/engine.log &"
    export CYC_ENGINE_CONTAINER="localrun/cyc-engine-container"; export OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcyc.properties=/tmp/b6216549/cyc_engine.properties"
    nohup "localrun/cyc-engine-container/run.sh" 1>>"localrun/engine.log" 2>>"localrun/engine.log" &
    shellPIDengine=$!
    echo "$shellPIDengine">".enginePid"
  else 
    shellPIDengine=$(<".enginePid")
    echo "Reusing already running instance $shellPIDengine"
  fi
fi

if [ "$TYPE_SOURCE_ENGINE" == "docker" ]; then
  #if [ -f "$BASE_PWD/.enginePid" ] && [ "$(<"$BASE_PWD/.enginePid")" == "download" ]; then
  #  echo "node running but started from different source type"
  #  exit 1
  #fi
  if [ ! -f "$BASE_PWD/.enginePid" ]; then
    startDockerNetwork
    

if [ "$TYPE_SOURCE_DB" == "docker" ]; then
  REPLVAR_ENGINE_DB="db"
elif [ "$TYPE_SOURCE_DB" == "local" ]; then
  REPLVAR_ENGINE_DB="host.docker.internal"
fi


    
mkdir -p localrun/b6216549

cat <<EOTb6216549 > localrun/b6216549/cyc_engine.properties

bind=0.0.0.0

couchdb.host=$REPLVAR_ENGINE_DB

EOTb6216549


mkdir -p localrun/d8a6791d

cat <<EOTd8a6791d > localrun/d8a6791d/security.policy

grant codeBase "file:/var/lib/tomcat7/jmxtrans/jmxtrans-agent.jar" {

	permission javax.management.MBeanPermission "-#-[-]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.ClassLoadingImpl#-[java.lang:type=ClassLoading]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.ClassLoadingImpl#LoadedClassCount[java.lang:type=ClassLoading]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.ThreadImpl#-[java.lang:type=Threading]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.ThreadImpl#ThreadCount[java.lang:type=Threading]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.MemoryImpl#-[java.lang:type=Memory]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.MemoryImpl#NonHeapMemoryUsage[java.lang:type=Memory]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.MemoryImpl#HeapMemoryUsage[java.lang:type=Memory]", "getAttribute";	

	permission javax.management.MBeanPermission "sun.management.GarbageCollectorImpl#-[java.lang:name=*,type=GarbageCollector]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.GarbageCollectorImpl#CollectionTime[java.lang:name=*,type=GarbageCollector]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.GarbageCollectorImpl#CollectionCount[java.lang:name=*,type=GarbageCollector]", "getAttribute";

	// OS X 

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#-[java.lang:type=OperatingSystem]", "queryNames";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#SystemLoadAverage[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#SystemCpuLoad[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#ProcessCpuLoad[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#OpenFileDescriptorCount[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#FreeSwapSpaceSize[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#FreePhysicalMemorySize[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "sun.management.OperatingSystemImpl#CommittedVirtualMemorySize[java.lang:type=OperatingSystem]", "getAttribute";

	// Linux

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#-[java.lang:type=OperatingSystem]", "queryNames";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#SystemLoadAverage[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#SystemCpuLoad[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#ProcessCpuLoad[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#OpenFileDescriptorCount[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#FreeSwapSpaceSize[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#FreePhysicalMemorySize[java.lang:type=OperatingSystem]", "getAttribute";

	permission javax.management.MBeanPermission "com.sun.management.UnixOperatingSystem#CommittedVirtualMemorySize[java.lang:type=OperatingSystem]", "getAttribute";

	

	permission javax.management.MBeanPermission "de.oglimmer.cyc.mbean.GameRunStats#-[de.oglimmer.cyc:type=GameRunStats]", "queryNames";

	permission javax.management.MBeanPermission "de.oglimmer.cyc.mbean.GameRunStats#*[de.oglimmer.cyc:type=GameRunStats]", "getAttribute";

	permission java.net.SocketPermission "vpn.oglimmer.de", "resolve";

	permission java.net.SocketPermission "104.236.33.19:2003", "connect,resolve";

};



grant codeBase "file:\${cyc.home}/engine-container-jar-with-dependencies.jar" {



	permission java.lang.RuntimePermission "accessClassInPackage.com.sun.proxy";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.reflect";

	// needed for netty

	permission java.util.PropertyPermission "io.netty.eventLoopThreads", "read";

	permission java.util.PropertyPermission "io.netty.noUnsafe", "read";

	permission java.util.PropertyPermission "io.netty.tryUnsafe", "read";

	permission java.util.PropertyPermission "io.netty.noJavassist", "read";

	permission java.util.PropertyPermission "io.netty.noKeySetOptimization", "read";

	permission java.util.PropertyPermission "io.netty.selectorAutoRebuildThreshold", "read";

	permission java.util.PropertyPermission "io.netty.initialSeedUniquifier", "read";

	permission java.util.PropertyPermission "io.netty.noPreferDirect", "read";

	permission java.util.PropertyPermission "io.netty.noResourceLeakDetection", "read";

	permission java.util.PropertyPermission "org.jboss.netty.tryUnsafe", "read";

	permission java.util.PropertyPermission "sun.nio.ch.bugLevel", "read,write";

	permission java.util.PropertyPermission "cyc.debug", "read";

	permission java.util.PropertyPermission "cyc.home", "read";

	permission java.io.FilePermission "/usr/bin/id", "execute";

	permission java.io.FilePermission "/proc/sys/net/core/somaxconn", "read";

	permission java.lang.RuntimePermission "setIO";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.nio.ch";

	permission java.net.NetPermission "getNetworkInformation";

	permission java.lang.management.ManagementPermission "monitor";



	permission java.net.SocketPermission "127.0.0.1:-", "accept,resolve";

	permission java.net.SocketPermission "localhost", "resolve,listen";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.reflect";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.text.resources";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.util.resources";

	permission java.lang.RuntimePermission "readFileDescriptor";

	permission java.lang.RuntimePermission "writeFileDescriptor";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.net.www.protocol.jar";

	permission java.net.NetPermission "getProxySelector";

	permission java.security.SecurityPermission "getPolicy";

	permission java.security.SecurityPermission "getProperty.networkaddress.cache.negative.ttl";

	permission java.security.SecurityPermission "getProperty.networkaddress.cache.ttl";

	permission java.util.logging.LoggingPermission "control";

	permission java.util.PropertyPermission "org.xeustechnologies.jcl.AbstractClassLoader\$SystemLoader", "read";

	permission java.util.PropertyPermission "org.xeustechnologies.jcl.AbstractClassLoader\$ParentLoader", "read";

	permission java.util.PropertyPermission "org.xeustechnologies.jcl.AbstractClassLoader\$CurrentLoader", "read";

	permission java.util.PropertyPermission "org.xeustechnologies.jcl.AbstractClassLoader\$ThreadContextLoader", "read";

	permission java.util.PropertyPermission "org.xeustechnologies.jcl.JarClassLoader\$LocalLoader", "read";

	permission java.util.PropertyPermission "jcl.suppressCollisionException", "read";

	permission java.util.PropertyPermission "jcl.suppressMissingResourceException", "read";

	permission java.util.PropertyPermission "osgi.bootdelegation", "read";

	permission java.util.PropertyPermission "osgi.bootdelegation.strict", "read";

	permission java.util.PropertyPermission "org.osgi.framework.bootdelegation", "read";

	permission java.util.PropertyPermission "file.encoding", "read";

	permission java.util.PropertyPermission "java.home", "read";

	permission java.util.PropertyPermission "java.net.useSystemProxies", "read";

	permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read";

	permission java.util.PropertyPermission "java.util.Arrays.useLegacyMergeSort", "read";

	permission java.util.PropertyPermission "jcl.autoProxy", "read";

	permission java.util.PropertyPermission "line.separator", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.diagnostics.dest", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.log", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedContext", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedDiscovery", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedHierarchy", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.LogFactory", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.LogFactory.HashtableImpl", "read";

	permission java.util.PropertyPermission "socksProxyHost", "read";

	permission java.util.PropertyPermission "sun.io.serialization.extendedDebugInfo", "read";

	permission java.util.PropertyPermission "sun.net.inetaddr.ttl", "read";

	permission java.util.PropertyPermission "sun.net.maxDatagramSockets", "read";

	permission java.util.PropertyPermission "sun.reflect.proxy.allowsNewInstance", "read";

	permission java.util.PropertyPermission "sun.reflect.proxy.allowsNullLoader", "read";

	permission java.util.PropertyPermission "sun.util.logging.disableCallerCheck", "read";

	permission java.util.PropertyPermission "user.dir", "read";	



};



// Standard extensions get all permissions by default



grant codeBase "file:\${{java.ext.dirs}}/*" {

	permission java.security.AllPermission;

};



// MacOS X extensions START

grant codeBase "file:\${user.home}/Library/Java/Extensions/*" {

	permission java.security.AllPermission;

};



grant codeBase "file:/Library/Java/Extensions/*" {

	permission java.security.AllPermission;

};



grant codeBase "file:/System/Library/Java/Extensions/*" {

	permission java.security.AllPermission;

};



grant codeBase "file:/Network/Library/Java/Extensions/*" {

	permission java.security.AllPermission;

};

// MacOS X extensions END



// Since JCL (Java ClassLoader doesn't support proper codeBase handling, we have to put permission for the engine here)

// should be: grant codeBase "file:\${cyc.home}/cyc*/-" { // sure "*" isn't supported, but that doesn't matter anyway

grant {

	permission java.util.PropertyPermission "http.proxyHost", "read";

	permission java.util.PropertyPermission "http.proxyPort", "read";

	permission java.util.PropertyPermission "cyc.properties", "read";

	permission java.io.FilePermission "\${cyc.properties}", "read";



	permission java.util.PropertyPermission "cyc.home", "read";

	permission java.io.FilePermission "\${cyc.home}", "read";

	permission java.io.FilePermission "\${cyc.home}/logs/-", "read,write";



	// needed as OpeningHours is running multi-threaded	

	permission java.lang.RuntimePermission "modifyThread";

	// needed for "version"

	permission java.io.FilePermission "\${cyc.home}/-", "read";

	// needed for CouchDB access

permission java.net.SocketPermission "$REPLVAR_ENGINE_DB:5984", "connect,resolve";

	// needed for ektorp framework

	permission java.lang.RuntimePermission "accessDeclaredMembers";

	permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

	permission java.util.PropertyPermission "org.ektorp.support.AutoUpdateViewOnChange", "read";

	permission java.util.PropertyPermission "org.ektorp.support.UpdateDesignDocOnDiff", "read";

	// needed for groovy 1.9

	permission java.util.PropertyPermission "antlr.ast", "read";

	permission java.util.PropertyPermission "groovy.compiler.strictNames", "read";

	permission java.util.PropertyPermission "groovy.log.classgen", "read";

	permission java.util.PropertyPermission "groovy.use.classvalue", "read";

	permission java.util.PropertyPermission "io.netty.availableProcessors", "read";

	permission java.util.PropertyPermission "io.netty.defaultPromise.maxListenerStackDepth", "read";

	permission java.util.PropertyPermission "io.netty.eventexecutor.maxPendingTasks", "read";

	permission java.util.PropertyPermission "io.netty.eventLoop.maxPendingTasks", "read";

	permission java.util.PropertyPermission "io.netty.tryReflectionSetAccessible", "read";

	permission java.util.PropertyPermission "io.netty.tmpdir", "read";

	permission java.util.PropertyPermission "java.io.tmpdir", "read";

	permission java.util.PropertyPermission "io.netty.bitMode", "read";

	permission java.util.PropertyPermission "sun.arch.data.model", "read";

	permission java.util.PropertyPermission "com.ibm.vm.bitmode", "read";

	permission java.util.PropertyPermission "io.netty.maxDirectMemory", "read";

	permission java.util.PropertyPermission "io.netty.uninitializedArrayAllocationThreshold", "read";

	permission java.util.PropertyPermission "user.name", "read";

	permission java.util.PropertyPermission "io.netty.threadLocalMap.stringBuilder.initialSize", "read";

	permission java.util.PropertyPermission "io.netty.threadLocalMap.stringBuilder.maxSize", "read";

	permission java.util.PropertyPermission "io.netty.processId", "read";

	permission java.util.PropertyPermission "io.netty.machineId", "read";

	permission java.util.PropertyPermission "java.net.preferIPv4Stack", "read";

	permission java.util.PropertyPermission "java.net.preferIPv6Addresses", "read";

	permission java.util.PropertyPermission "io.netty.net.somaxconn.trySysctl", "read";

	permission java.util.PropertyPermission "io.netty.transport.outboundBufferEntrySizeOverhead", "read";

	permission java.util.PropertyPermission "io.netty.leakDetectionLevel", "read";

	permission java.util.PropertyPermission "io.netty.leakDetection.level", "read";

	permission java.util.PropertyPermission "io.netty.leakDetection.targetRecords", "read";

	permission java.util.PropertyPermission "io.netty.allocator.type", "read";

	permission java.util.PropertyPermission "io.netty.allocator.pageSize", "read";

	permission java.util.PropertyPermission "io.netty.allocator.maxOrder", "read";

	permission java.util.PropertyPermission "io.netty.allocator.numHeapArenas", "read";

	permission java.util.PropertyPermission "io.netty.allocator.numDirectArenas", "read";

	permission java.util.PropertyPermission "io.netty.allocator.tinyCacheSize", "read";

	permission java.util.PropertyPermission "io.netty.allocator.smallCacheSize", "read";

	permission java.util.PropertyPermission "io.netty.allocator.normalCacheSize", "read";

	permission java.util.PropertyPermission "io.netty.allocator.maxCachedBufferCapacity", "read";

	permission java.util.PropertyPermission "io.netty.allocator.cacheTrimInterval", "read";

	permission java.util.PropertyPermission "io.netty.allocator.useCacheForAllThreads", "read";

	permission java.util.PropertyPermission "io.netty.allocator.directMemoryCacheAlignment", "read";

	permission java.util.PropertyPermission "io.netty.threadLocalDirectBufferSize", "read";

	permission java.util.PropertyPermission "io.netty.maxThreadLocalCharBufferSize", "read";

	permission java.util.PropertyPermission "io.netty.buffer.bytebuf.checkAccessible", "read";

	permission java.util.PropertyPermission "io.netty.customResourceLeakDetector", "read";

	permission java.util.PropertyPermission "io.netty.recycler.maxCapacity", "read";

	permission java.util.PropertyPermission "io.netty.recycler.maxCapacityPerThread", "read";

	permission java.util.PropertyPermission "io.netty.recycler.maxSharedCapacityFactor", "read";

	permission java.util.PropertyPermission "io.netty.recycler.maxDelayedQueuesPerThread", "read";

	permission java.util.PropertyPermission "io.netty.recycler.linkCapacity", "read";

	permission java.util.PropertyPermission "io.netty.recycler.ratio", "read";

	permission java.util.PropertyPermission "slf4j.detectLoggerNameMismatch", "read";

	permission java.util.PropertyPermission "logback.statusListenerClass", "read";

	permission java.util.PropertyPermission "logback.ignoreTCL", "read";

	permission java.util.PropertyPermission "logback.configurationFile", "read";

	permission java.util.PropertyPermission "logback.debug", "read";

	permission java.util.PropertyPermission "logback.ContextSelector", "read";

	permission java.util.PropertyPermission "groovy.parameters", "read";

	permission java.util.PropertyPermission "file.encoding", "read";

	permission java.util.PropertyPermission "groovy.enable.parameterized.type.cache", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.diagnostics.dest", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.LogFactory.HashtableImpl", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.LogFactory", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedContext", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedDiscovery", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log.allowFlawedHierarchy", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.Log", "read";

	permission java.util.PropertyPermission "org.apache.commons.logging.log", "read";

	permission java.util.PropertyPermission "groovy.division.extra.precision", "read";

	permission java.util.PropertyPermission "groovy.division.min.scale", "read";

	permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal";

	permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.reflect";

	permission java.lang.RuntimePermission "getenv.TMPDIR";

	permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.misc";

	permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.vm.annotation";

	permission java.lang.RuntimePermission "accessSystemModules";

	permission java.lang.RuntimePermission "accessClassInPackage.sun.reflect";

	// groovy < 1.8

	permission groovy.security.GroovyCodeSourcePermission "/groovy/script";

	permission java.lang.RuntimePermission "createClassLoader";

	permission java.lang.RuntimePermission "getClassLoader";

	permission java.lang.RuntimePermission "getProtectionDomain";

	permission java.lang.RuntimePermission "closeClassLoader";

	permission java.lang.RuntimePermission "setContextClassLoader";

	permission java.util.PropertyPermission "ANTLR_DO_NOT_EXIT", "read";

	permission java.util.PropertyPermission "ANTLR_USE_DIRECT_CLASS_LOADING", "read";

	permission java.util.PropertyPermission "groovy.ast", "read";

	permission java.util.PropertyPermission "groovy.default.scriptExtension", "read";

	permission java.util.PropertyPermission "groovy.source.encoding", "read";

	permission java.util.PropertyPermission "groovy.target.bytecode", "read";

	permission java.util.PropertyPermission "groovy.target.directory", "read";

	permission java.util.PropertyPermission "groovy.target.indy", "read";

	permission java.util.PropertyPermission "groovyjarjarantlr.ast", "read";

	permission java.io.FilePermission "/groovy/script", "read";

	permission java.util.PropertyPermission "guava.concurrent.generate_cancellation_cause", "read";

};



grant { permission java.net.SocketPermission "*:*", "accept,resolve"; };

EOTd8a6791d

    verbosePrint "docker run --rm -d -p 9998:9998 -m 200M --net=cycnet --name=engine $ADD_HOST_INTERNAL -v $(pwd)/localrun/b6216549:/tmp/b6216549 -v $(pwd)/localrun/d8a6791d/security.policy:/home/node/exec_env/localrun/cyc-engine-container/security.policy -e CYC_ENGINE_CONTAINER=localrun/cyc-engine-container -e OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcyc.properties=/tmp/b6216549/cyc_engine.properties -v $(pwd):/home/node/exec_env -w /home/node/exec_env openjdk:$TYPE_SOURCE_ENGINE_VERSION /bin/bash -c ./localrun/cyc-engine-container/run.sh"
    dockerContainerIDengine=$(docker run --rm -d -p 9998:9998 \
        -m 200M \
        --net=cycnet --name=engine $ADD_HOST_INTERNAL \
        -v "$(pwd)/localrun/b6216549:/tmp/b6216549" -v "$(pwd)/localrun/d8a6791d/security.policy:/home/node/exec_env/localrun/cyc-engine-container/security.policy"  \
        -e CYC_ENGINE_CONTAINER="localrun/cyc-engine-container" -e OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcyc.properties=/tmp/b6216549/cyc_engine.properties" \
        -v "$(pwd)":/home/node/exec_env -w /home/node/exec_env openjdk:$TYPE_SOURCE_ENGINE_VERSION /bin/bash -c ./localrun/cyc-engine-container/run.sh)
    echo "$dockerContainerIDengine">"$BASE_PWD/.enginePid"
  else
    dockerContainerIDengine=$(<"$BASE_PWD/.enginePid")
    echo "Reusing already running instance $dockerContainerIDengine"
  fi
fi



#---------------------
# START - Plugin-LeaveComp


if [ "$(uname)" == "Darwin" ]; then export JAVA_HOME="$ORIGINAL_JAVA_HOME"; fi

  
# END - Plugin-LeaveComp
#---------------------

fi



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# TomcatPlugin // tomcat
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
verbosePrint "TomcatPlugin // tomcat"


if [ "$START_TOMCAT" = "YES" ]; then

#---------------------
# START - Plugin-PrepareComp




IFS=',' read -r -a array <<< "$TYPE_SOURCE"
for typeSourceElement in "${array[@]}"; do
  IFS=: read comp type pathOrVersion <<< "$typeSourceElement"

  if [ "$comp" == "tomcat" ]; then
    TYPE_SOURCE_TOMCAT=$type
    if [ "$TYPE_SOURCE_TOMCAT" == "local" ]; then
      TYPE_SOURCE_TOMCAT_PATH=$pathOrVersion
    else
      TYPE_SOURCE_TOMCAT_VERSION=$pathOrVersion
    fi
  fi

done



if [ "$TYPE_SOURCE_TOMCAT" == "docker" ]; then
  if [ -z "$TYPE_SOURCE_TOMCAT_VERSION" ]; then
    TYPE_SOURCE_TOMCAT_VERSION=tomcat9-openjdk11-openj9
  fi
    
fi



if [ "$TYPE_SOURCE_TOMCAT" == "download" ]; then
  if [ -z "$TYPE_SOURCE_TOMCAT_VERSION" ]; then
    TYPE_SOURCE_TOMCAT_VERSION=9
  fi
  # find latest tomcat version for $TYPE_SOURCE_TOMCAT_VERSION
  if [ "$(uname)" == "Linux" ]; then
    GREP_PERL_MODE="-P"
  fi
  TOMCAT_BASE_URL="http://mirror.vorboss.net/apache/tomcat"
  TOMCAT_VERSION_PRE=$(curl -s "$TOMCAT_BASE_URL/tomcat-$TYPE_SOURCE_TOMCAT_VERSION/"|grep -m1 -o $GREP_PERL_MODE "<a href=\"v\d*.\d*.\d*" || echo "__________9.0.10")
  TOMCAT_VERSION=${TOMCAT_VERSION_PRE:10}
  TOMCAT_URL=$TOMCAT_BASE_URL/tomcat-$TYPE_SOURCE_TOMCAT_VERSION/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz  
fi



verbosePrint "TYPE_SOURCE_TOMCAT = $TYPE_SOURCE_TOMCAT // TYPE_SOURCE_TOMCAT_PATH = $TYPE_SOURCE_TOMCAT_PATH // TYPE_SOURCE_TOMCAT_VERSION = $TYPE_SOURCE_TOMCAT_VERSION"


  
# END - Plugin-PrepareComp
#---------------------



if [ "$TYPE_SOURCE_TOMCAT" == "download" ]; then
  if [ -f ".tomcatPid" ] && [ "$(<.tomcatPid)" != "download" ]; then
    echo "Tomcat running but started from different source type"
    exit 1
  fi
  # download tomcat
  if [ ! -f "/${TMPDIR:-/tmp}/apache-tomcat-$TOMCAT_VERSION.tar" ]; then
    curl -s $TOMCAT_URL | gzip -d >/${TMPDIR:-/tmp}/apache-tomcat-$TOMCAT_VERSION.tar
  fi
  # extract tomcat
  if [ ! -d "./apache-tomcat-$TOMCAT_VERSION" ]; then
    tar -xf /${TMPDIR:-/tmp}/apache-tomcat-$TOMCAT_VERSION.tar -C ./localrun
  fi
fi



dockerAddLibRefs=()
if [ "$TYPE_SOURCE_TOMCAT" == "docker" ]; then
	
  	mkdir -p localrun/webapps
  	targetPath=localrun/webapps/
fi

if [ "$TYPE_SOURCE_TOMCAT" == "download" ]; then
	
	targetPath=localrun/apache-tomcat-$TOMCAT_VERSION/webapps/
fi

if [ "$TYPE_SOURCE_TOMCAT" == "local" ]; then
  targetPath=$TYPE_SOURCE_TOMCAT_PATH/webapps/
fi

f_deploy() {
	cp web/target/cyr##001.war $targetPath
}
f_deploy

if [ "$TYPE_SOURCE_TOMCAT" == "download" ]; then
  if [ ! -f ".tomcatPid" ]; then
    
      REPLVAR_TOMCAT_DB="localhost"
REPLVAR_TOMCAT_ENGINE="localhost"
      
mkdir -p localrun/34aabfcf

cat <<EOT34aabfcf > localrun/34aabfcf/cyc_web.properties

couchdb.host=$REPLVAR_TOMCAT_DB

engine.host.full=$REPLVAR_TOMCAT_ENGINE

engine.host.test=$REPLVAR_TOMCAT_ENGINE

EOT34aabfcf

  export JAVA_OPTS="-Dcyc.properties=localrun/34aabfcf/cyc_web.properties"
    
    export JAVA_OPTS="$JAVA_OPTS "
    ./localrun/apache-tomcat-$TOMCAT_VERSION/bin/startup.sh
    echo "download">.tomcatPid
  else
    echo "Reusing already running instance"
  fi
  tailCmd="tail -f ./localrun/apache-tomcat-$TOMCAT_VERSION/logs/catalina.out"
fi

if [ "$TYPE_SOURCE_TOMCAT" == "docker" ]; then
  if [ -f ".tomcatPid" ] && [ "$(<.tomcatPid)" == "download" ]; then
    echo "Tomcat running but started from different source type"
    exit 1
  fi
  if [ ! -f ".tomcatPid" ]; then
    startDockerNetwork
    

if [ "$TYPE_SOURCE_DB" == "docker" ]; then
  REPLVAR_TOMCAT_DB="db"
elif [ "$TYPE_SOURCE_DB" == "local" ]; then
  REPLVAR_TOMCAT_DB="host.docker.internal"
fi

if [ "$TYPE_SOURCE_ENGINE" == "docker" ]; then
  REPLVAR_TOMCAT_ENGINE="engine"
elif [ "$TYPE_SOURCE_ENGINE" == "local" ]; then
  REPLVAR_TOMCAT_ENGINE="host.docker.internal"
fi


    
mkdir -p localrun/34aabfcf

cat <<EOT34aabfcf > localrun/34aabfcf/cyc_web.properties

couchdb.host=$REPLVAR_TOMCAT_DB

engine.host.full=$REPLVAR_TOMCAT_ENGINE

engine.host.test=$REPLVAR_TOMCAT_ENGINE

EOT34aabfcf

    verbosePrint "docker run --rm -d ${dockerAddLibRefs[@]} -p 8080:8080 -m 120M --net=cycnet --name=tomcat $ADD_HOST_INTERNAL -v "$(pwd)/localrun/34aabfcf:/tmp/34aabfcf" -e JAVA_OPTS="-Dcyc.properties=/tmp/34aabfcf/cyc_web.properties" -v "$(pwd)/localrun/webapps":/usr/local/tomcat/webapps oglimmer/adoptopenjdk-tomcat:$TYPE_SOURCE_TOMCAT_VERSION"
    dockerContainerIDtomcat=$(docker run --rm -d ${dockerAddLibRefs[@]} -p 8080:8080 \
        -m 120M \
        --net=cycnet --name=tomcat $ADD_HOST_INTERNAL \
        -v "$(pwd)/localrun/34aabfcf:/tmp/34aabfcf" -e JAVA_OPTS="-Dcyc.properties=/tmp/34aabfcf/cyc_web.properties" \
        -v "$(pwd)/localrun/webapps":/usr/local/tomcat/webapps oglimmer/adoptopenjdk-tomcat:$TYPE_SOURCE_TOMCAT_VERSION)
    echo "$dockerContainerIDtomcat">.tomcatPid
  else
    dockerContainerIDtomcat=$(<.tomcatPid)
    echo "Reusing already running instance $dockerContainerIDtomcat"
  fi
  tailCmd="docker logs -f $dockerContainerIDtomcat"
fi

if [ "$TYPE_SOURCE_TOMCAT" == "local" ]; then
  if [ -f ".tomcatPid" ]; then
    echo "Tomcat running but started from different source type"
    exit 1
  fi
  tailCmd="tail -f $TYPE_SOURCE_TOMCAT_PATH/logs/catalina.out"
fi





fi

#---------------------
# START - WaitBuilder

# waiting for ctrl-c
echo "*************************************************************"
echo "**** SCRIPT COMPLETED, STARTUP IN PROGRESS ******************"
if [ "$TAIL" == "YES" ]; then
  echo "http://localhost:8080/cyr"
  echo "**** now tailing log: $tailCmd"
  $tailCmd
else
  echo "http://localhost:8080/cyr"
  echo "$tailCmd"
  echo "<return> to rebuild, ctrl-c to stop db, engine, tomcat"
  while true; do
    read </dev/tty
    f_build
    f_deploy
  done
fi

  
# END - WaitBuilder
#---------------------

